# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2
import query_pb2 as query__pb2


class QueryStub(object):
    """查询
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetVipSaleOrder = channel.unary_unary(
                '/Query/GetVipSaleOrder',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                response_deserializer=query__pb2.G_VipSaleOrderResponse.FromString,
                )
        self.PageGetDayTradeData = channel.unary_unary(
                '/Query/PageGetDayTradeData',
                request_serializer=query__pb2.G_ErpDayTradePullRequest.SerializeToString,
                response_deserializer=query__pb2.G_ErpDayTradePullResponse.FromString,
                )
        self.PageCurrentAccountDetailList = channel.unary_unary(
                '/Query/PageCurrentAccountDetailList',
                request_serializer=query__pb2.G_CurrentAccountDetailRequest.SerializeToString,
                response_deserializer=query__pb2.G_CurrentAccountDetailListResponse.FromString,
                )
        self.ErpBillInfoList = channel.unary_unary(
                '/Query/ErpBillInfoList',
                request_serializer=query__pb2.G_ErpBillInfoRequest.SerializeToString,
                response_deserializer=query__pb2.G_ErpBillInfoResponse.FromString,
                )
        self.QuerySyncbillMonitor = channel.unary_unary(
                '/Query/QuerySyncbillMonitor',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                response_deserializer=query__pb2.G_SyncbillMonitor.FromString,
                )
        self.ArApByStartAndEndPullTask = channel.unary_unary(
                '/Query/ArApByStartAndEndPullTask',
                request_serializer=query__pb2.G_ArApByStartAndEndRequest.SerializeToString,
                response_deserializer=common__pb2.G_PushResponse.FromString,
                )
        self.BusinessHistoryPullTask = channel.unary_unary(
                '/Query/BusinessHistoryPullTask',
                request_serializer=query__pb2.G_BusinessHistoryRequest.SerializeToString,
                response_deserializer=common__pb2.G_PushResponse.FromString,
                )
        self.QueryAccountBalance = channel.unary_unary(
                '/Query/QueryAccountBalance',
                request_serializer=query__pb2.G_QueryAccountBalanceRequest.SerializeToString,
                response_deserializer=query__pb2.G_QueryAccountBalanceResponse.FromString,
                )
        self.QueryAccountBalanceDetail = channel.unary_unary(
                '/Query/QueryAccountBalanceDetail',
                request_serializer=query__pb2.G_QueryCutomerAccountBalanceDetailRequest.SerializeToString,
                response_deserializer=query__pb2.G_QueryCutomerAccountBalanceDetailListResponse.FromString,
                )
        self.QueryPriceTrackReport = channel.unary_unary(
                '/Query/QueryPriceTrackReport',
                request_serializer=query__pb2.G_BusinessHistoryRequest.SerializeToString,
                response_deserializer=common__pb2.G_PushResponse.FromString,
                )


class QueryServicer(object):
    """查询
    """

    def GetVipSaleOrder(self, request, context):
        """会员获取零售单
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PageGetDayTradeData(self, request, context):
        """获取 每日销售额和交易次数
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PageCurrentAccountDetailList(self, request, context):
        """往来对账明细查询
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ErpBillInfoList(self, request, context):
        """往来单据明细
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySyncbillMonitor(self, request, context):
        """查询过账上报单据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ArApByStartAndEndPullTask(self, request, context):
        """推送客户应收应付预收预付 数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BusinessHistoryPullTask(self, request, context):
        """推送所有影响往来的经营历程 数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryAccountBalance(self, request, context):
        """查询客户返利余额
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryAccountBalanceDetail(self, request, context):
        """查询客户返利余额明细数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryPriceTrackReport(self, request, context):
        """查询客户价格跟踪报表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetVipSaleOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVipSaleOrder,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                    response_serializer=query__pb2.G_VipSaleOrderResponse.SerializeToString,
            ),
            'PageGetDayTradeData': grpc.unary_unary_rpc_method_handler(
                    servicer.PageGetDayTradeData,
                    request_deserializer=query__pb2.G_ErpDayTradePullRequest.FromString,
                    response_serializer=query__pb2.G_ErpDayTradePullResponse.SerializeToString,
            ),
            'PageCurrentAccountDetailList': grpc.unary_unary_rpc_method_handler(
                    servicer.PageCurrentAccountDetailList,
                    request_deserializer=query__pb2.G_CurrentAccountDetailRequest.FromString,
                    response_serializer=query__pb2.G_CurrentAccountDetailListResponse.SerializeToString,
            ),
            'ErpBillInfoList': grpc.unary_unary_rpc_method_handler(
                    servicer.ErpBillInfoList,
                    request_deserializer=query__pb2.G_ErpBillInfoRequest.FromString,
                    response_serializer=query__pb2.G_ErpBillInfoResponse.SerializeToString,
            ),
            'QuerySyncbillMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySyncbillMonitor,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                    response_serializer=query__pb2.G_SyncbillMonitor.SerializeToString,
            ),
            'ArApByStartAndEndPullTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ArApByStartAndEndPullTask,
                    request_deserializer=query__pb2.G_ArApByStartAndEndRequest.FromString,
                    response_serializer=common__pb2.G_PushResponse.SerializeToString,
            ),
            'BusinessHistoryPullTask': grpc.unary_unary_rpc_method_handler(
                    servicer.BusinessHistoryPullTask,
                    request_deserializer=query__pb2.G_BusinessHistoryRequest.FromString,
                    response_serializer=common__pb2.G_PushResponse.SerializeToString,
            ),
            'QueryAccountBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryAccountBalance,
                    request_deserializer=query__pb2.G_QueryAccountBalanceRequest.FromString,
                    response_serializer=query__pb2.G_QueryAccountBalanceResponse.SerializeToString,
            ),
            'QueryAccountBalanceDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryAccountBalanceDetail,
                    request_deserializer=query__pb2.G_QueryCutomerAccountBalanceDetailRequest.FromString,
                    response_serializer=query__pb2.G_QueryCutomerAccountBalanceDetailListResponse.SerializeToString,
            ),
            'QueryPriceTrackReport': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryPriceTrackReport,
                    request_deserializer=query__pb2.G_BusinessHistoryRequest.FromString,
                    response_serializer=common__pb2.G_PushResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """查询
    """

    @staticmethod
    def GetVipSaleOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Query/GetVipSaleOrder',
            google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            query__pb2.G_VipSaleOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PageGetDayTradeData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Query/PageGetDayTradeData',
            query__pb2.G_ErpDayTradePullRequest.SerializeToString,
            query__pb2.G_ErpDayTradePullResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PageCurrentAccountDetailList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Query/PageCurrentAccountDetailList',
            query__pb2.G_CurrentAccountDetailRequest.SerializeToString,
            query__pb2.G_CurrentAccountDetailListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ErpBillInfoList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Query/ErpBillInfoList',
            query__pb2.G_ErpBillInfoRequest.SerializeToString,
            query__pb2.G_ErpBillInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuerySyncbillMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Query/QuerySyncbillMonitor',
            google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            query__pb2.G_SyncbillMonitor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ArApByStartAndEndPullTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Query/ArApByStartAndEndPullTask',
            query__pb2.G_ArApByStartAndEndRequest.SerializeToString,
            common__pb2.G_PushResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BusinessHistoryPullTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Query/BusinessHistoryPullTask',
            query__pb2.G_BusinessHistoryRequest.SerializeToString,
            common__pb2.G_PushResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryAccountBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Query/QueryAccountBalance',
            query__pb2.G_QueryAccountBalanceRequest.SerializeToString,
            query__pb2.G_QueryAccountBalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryAccountBalanceDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Query/QueryAccountBalanceDetail',
            query__pb2.G_QueryCutomerAccountBalanceDetailRequest.SerializeToString,
            query__pb2.G_QueryCutomerAccountBalanceDetailListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryPriceTrackReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Query/QueryPriceTrackReport',
            query__pb2.G_BusinessHistoryRequest.SerializeToString,
            common__pb2.G_PushResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
