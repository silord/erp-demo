# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import base_package.common_pb2 as common__pb2
import base_package.customer_pb2 as customer__pb2


class CustomerStub(object):
    """客户管理
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PageCustomerClassifyList = channel.unary_unary(
                '/Customer/PageCustomerClassifyList',
                request_serializer=common__pb2.G_BaseInfoRequest.SerializeToString,
                response_deserializer=customer__pb2.G_PageCustomerClassifyResponse.FromString,
                )
        self.CustomerSynchro = channel.unary_unary(
                '/Customer/CustomerSynchro',
                request_serializer=customer__pb2.G_CustomerSynchroRequest.SerializeToString,
                response_deserializer=customer__pb2.G_CustomerSynchroListResponse.FromString,
                )
        self.CustomerPullTask = channel.unary_unary(
                '/Customer/CustomerPullTask',
                request_serializer=customer__pb2.G_CustomerPullTaskRequest.SerializeToString,
                response_deserializer=common__pb2.G_PushResponse.FromString,
                )
        self.CustomerMatchingList = channel.unary_unary(
                '/Customer/CustomerMatchingList',
                request_serializer=customer__pb2.G_CustomerMatchingListRequest.SerializeToString,
                response_deserializer=customer__pb2.G_CustomerMatchingListResponse.FromString,
                )
        self.PushCustomer = channel.unary_unary(
                '/Customer/PushCustomer',
                request_serializer=common__pb2.G_PushRequest.SerializeToString,
                response_deserializer=common__pb2.G_PushResponse.FromString,
                )
        self.PushCustomerSaleReport = channel.unary_unary(
                '/Customer/PushCustomerSaleReport',
                request_serializer=common__pb2.G_PushRequest.SerializeToString,
                response_deserializer=common__pb2.G_PushResponse.FromString,
                )
        self.GetCustomerQueryList = channel.unary_unary(
                '/Customer/GetCustomerQueryList',
                request_serializer=customer__pb2.G_CustomerQueryRequest.SerializeToString,
                response_deserializer=customer__pb2.G_PageCustomerQueryResponse.FromString,
                )
        self.PushCustromerBuyProductInfo = channel.unary_unary(
                '/Customer/PushCustromerBuyProductInfo',
                request_serializer=common__pb2.G_PushRequest.SerializeToString,
                response_deserializer=common__pb2.G_PushResponse.FromString,
                )
        self.GetCustomerArApList = channel.unary_unary(
                '/Customer/GetCustomerArApList',
                request_serializer=customer__pb2.G_CustomerArApListRequest.SerializeToString,
                response_deserializer=customer__pb2.G_CustomerArApListResponse.FromString,
                )
        self.PushCustomerState = channel.unary_unary(
                '/Customer/PushCustomerState',
                request_serializer=common__pb2.G_PushRequest.SerializeToString,
                response_deserializer=common__pb2.G_PushResponse.FromString,
                )


class CustomerServicer(object):
    """客户管理
    """

    def PageCustomerClassifyList(self, request, context):
        """获取客户分类
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CustomerSynchro(self, request, context):
        """同步客户信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CustomerPullTask(self, request, context):
        """拉取ERP客户 G_PageCustomerPullTaskResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CustomerMatchingList(self, request, context):
        """与ERP客户匹配
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushCustomer(self, request, context):
        """增量推送客户、联系人 G_PageCustomerPullTaskResponse  G_PagelinkInfoResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushCustomerSaleReport(self, request, context):
        """增量推送客户销售统计  G_PageCustomerSaleReportResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCustomerQueryList(self, request, context):
        """根据客户ID集合获取客户列表信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushCustromerBuyProductInfo(self, request, context):
        """增量推送客户购买商品信息 G_PageCusBuyProductInfoResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCustomerArApList(self, request, context):
        """根据请求传入的客户id查询出这些客户的应收，应付金额
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushCustomerState(self, request, context):
        """增量推送客户状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PageCustomerClassifyList': grpc.unary_unary_rpc_method_handler(
                    servicer.PageCustomerClassifyList,
                    request_deserializer=common__pb2.G_BaseInfoRequest.FromString,
                    response_serializer=customer__pb2.G_PageCustomerClassifyResponse.SerializeToString,
            ),
            'CustomerSynchro': grpc.unary_unary_rpc_method_handler(
                    servicer.CustomerSynchro,
                    request_deserializer=customer__pb2.G_CustomerSynchroRequest.FromString,
                    response_serializer=customer__pb2.G_CustomerSynchroListResponse.SerializeToString,
            ),
            'CustomerPullTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CustomerPullTask,
                    request_deserializer=customer__pb2.G_CustomerPullTaskRequest.FromString,
                    response_serializer=common__pb2.G_PushResponse.SerializeToString,
            ),
            'CustomerMatchingList': grpc.unary_unary_rpc_method_handler(
                    servicer.CustomerMatchingList,
                    request_deserializer=customer__pb2.G_CustomerMatchingListRequest.FromString,
                    response_serializer=customer__pb2.G_CustomerMatchingListResponse.SerializeToString,
            ),
            'PushCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.PushCustomer,
                    request_deserializer=common__pb2.G_PushRequest.FromString,
                    response_serializer=common__pb2.G_PushResponse.SerializeToString,
            ),
            'PushCustomerSaleReport': grpc.unary_unary_rpc_method_handler(
                    servicer.PushCustomerSaleReport,
                    request_deserializer=common__pb2.G_PushRequest.FromString,
                    response_serializer=common__pb2.G_PushResponse.SerializeToString,
            ),
            'GetCustomerQueryList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCustomerQueryList,
                    request_deserializer=customer__pb2.G_CustomerQueryRequest.FromString,
                    response_serializer=customer__pb2.G_PageCustomerQueryResponse.SerializeToString,
            ),
            'PushCustromerBuyProductInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.PushCustromerBuyProductInfo,
                    request_deserializer=common__pb2.G_PushRequest.FromString,
                    response_serializer=common__pb2.G_PushResponse.SerializeToString,
            ),
            'GetCustomerArApList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCustomerArApList,
                    request_deserializer=customer__pb2.G_CustomerArApListRequest.FromString,
                    response_serializer=customer__pb2.G_CustomerArApListResponse.SerializeToString,
            ),
            'PushCustomerState': grpc.unary_unary_rpc_method_handler(
                    servicer.PushCustomerState,
                    request_deserializer=common__pb2.G_PushRequest.FromString,
                    response_serializer=common__pb2.G_PushResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Customer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Customer(object):
    """客户管理
    """

    @staticmethod
    def PageCustomerClassifyList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/PageCustomerClassifyList',
            common__pb2.G_BaseInfoRequest.SerializeToString,
            customer__pb2.G_PageCustomerClassifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CustomerSynchro(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/CustomerSynchro',
            customer__pb2.G_CustomerSynchroRequest.SerializeToString,
            customer__pb2.G_CustomerSynchroListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CustomerPullTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/CustomerPullTask',
            customer__pb2.G_CustomerPullTaskRequest.SerializeToString,
            common__pb2.G_PushResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CustomerMatchingList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/CustomerMatchingList',
            customer__pb2.G_CustomerMatchingListRequest.SerializeToString,
            customer__pb2.G_CustomerMatchingListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/PushCustomer',
            common__pb2.G_PushRequest.SerializeToString,
            common__pb2.G_PushResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushCustomerSaleReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/PushCustomerSaleReport',
            common__pb2.G_PushRequest.SerializeToString,
            common__pb2.G_PushResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCustomerQueryList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/GetCustomerQueryList',
            customer__pb2.G_CustomerQueryRequest.SerializeToString,
            customer__pb2.G_PageCustomerQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushCustromerBuyProductInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/PushCustromerBuyProductInfo',
            common__pb2.G_PushRequest.SerializeToString,
            common__pb2.G_PushResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCustomerArApList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/GetCustomerArApList',
            customer__pb2.G_CustomerArApListRequest.SerializeToString,
            customer__pb2.G_CustomerArApListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushCustomerState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Customer/PushCustomerState',
            common__pb2.G_PushRequest.SerializeToString,
            common__pb2.G_PushResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
